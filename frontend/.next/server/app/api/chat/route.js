/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "(rsc)/../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cshilo%5CElective%20Chooser%5Cfrontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cshilo%5CElective%20Chooser%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cshilo%5CElective%20Chooser%5Cfrontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cshilo%5CElective%20Chooser%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/../node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/../node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/../node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/../node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/../node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/../node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/../node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/../node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/../node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/../node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/../node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/../node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_shilo_Elective_Chooser_frontend_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/chat/route.ts */ \"(rsc)/./src/app/api/chat/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\shilo\\\\Elective Chooser\\\\frontend\\\\src\\\\app\\\\api\\\\chat\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_shilo_Elective_Chooser_frontend_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/chat/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cshilo%5CElective%20Chooser%5Cfrontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cshilo%5CElective%20Chooser%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \*******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/chat/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/chat/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/../node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./src/lib/supabase.ts\");\n/* harmony import */ var _lib_openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/openai */ \"(rsc)/./src/lib/openai.ts\");\n/* harmony import */ var _lib_search__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/search */ \"(rsc)/./src/lib/search.ts\");\n/* harmony import */ var _lib_langchain_memory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/langchain-memory */ \"(rsc)/./src/lib/langchain-memory.ts\");\n\n\n\n\n// Extract program from user message\nfunction extractProgramFromMessage(message) {\n    const programKeywords = {\n        'Software Engineering': [\n            'software',\n            'se',\n            'software engineering'\n        ],\n        'Computer Engineering': [\n            'computer',\n            'ce',\n            'computer engineering',\n            'comp eng'\n        ],\n        'Electrical Engineering': [\n            'electrical',\n            'ee',\n            'electrical engineering'\n        ],\n        'Mechanical Engineering': [\n            'mechanical',\n            'me',\n            'mechanical engineering'\n        ],\n        'Civil Engineering': [\n            'civil',\n            'civ',\n            'civil engineering'\n        ],\n        'Chemical Engineering': [\n            'chemical',\n            'che',\n            'chemical engineering'\n        ],\n        'Systems Design Engineering': [\n            'systems',\n            'syde',\n            'systems design'\n        ],\n        'Biomedical Engineering': [\n            'biomedical',\n            'bme',\n            'biomedical engineering'\n        ],\n        'Environmental Engineering': [\n            'environmental',\n            'env',\n            'environmental engineering'\n        ],\n        'Geological Engineering': [\n            'geological',\n            'geo',\n            'geological engineering'\n        ],\n        'Architectural Engineering': [\n            'architectural',\n            'ae',\n            'architectural engineering'\n        ],\n        'Nanotechnology Engineering': [\n            'nanotechnology',\n            'ne',\n            'nano'\n        ]\n    };\n    const messageLower = message.toLowerCase();\n    for (const [program, keywords] of Object.entries(programKeywords)){\n        if (keywords.some((keyword)=>messageLower.includes(keyword))) {\n            return program;\n        }\n    }\n    return null;\n}\n\nasync function POST(request) {\n    try {\n        const { message, sessionId, userId } = await request.json();\n        if (!message || !sessionId || !userId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Missing required fields'\n            }, {\n                status: 400\n            });\n        }\n        // Get user profile with better error handling\n        console.log('🔍 Looking for profile with user_id:', userId);\n        let profile;\n        try {\n            const { data: profiles, error: profileError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from('profiles').select('*').eq('user_id', userId);\n            console.log('🔍 Profile query result:', {\n                profiles,\n                profileError\n            });\n            if (profileError) {\n                console.error('❌ Profile query error:', profileError);\n                // Create a fallback profile to prevent complete failure\n                profile = {\n                    user_id: userId,\n                    username: 'User',\n                    program: 'Not specified',\n                    current_term: '2A',\n                    completed_courses: [],\n                    planned_courses: [],\n                    interests: [\n                        'general'\n                    ],\n                    goal_tags: [\n                        'general'\n                    ],\n                    additional_comments: '',\n                    gpa: 0,\n                    constraints: {\n                        max_workload: 4,\n                        morning_labs: false,\n                        schedule_preferences: []\n                    }\n                };\n                console.log('⚠️ Using fallback profile due to database error');\n            } else if (!profiles || profiles.length === 0) {\n                console.error('❌ No profile found for user_id:', userId);\n                // Create a fallback profile for new users\n                profile = {\n                    user_id: userId,\n                    username: 'User',\n                    program: 'Not specified',\n                    current_term: '2A',\n                    completed_courses: [],\n                    planned_courses: [],\n                    interests: [\n                        'general'\n                    ],\n                    goal_tags: [\n                        'general'\n                    ],\n                    additional_comments: '',\n                    gpa: 0,\n                    constraints: {\n                        max_workload: 4,\n                        morning_labs: false,\n                        schedule_preferences: []\n                    }\n                };\n                console.log('⚠️ Using fallback profile - no profile found');\n            } else {\n                profile = profiles[0];\n                console.log('✅ Profile found:', profile);\n            }\n        } catch (error) {\n            console.error('❌ Critical error loading profile:', error);\n            // Create a minimal fallback profile\n            profile = {\n                user_id: userId,\n                username: 'User',\n                program: 'Not specified',\n                current_term: '2A',\n                completed_courses: [],\n                planned_courses: [],\n                interests: [\n                    'general'\n                ],\n                goal_tags: [\n                    'general'\n                ],\n                additional_comments: '',\n                gpa: 0,\n                constraints: {\n                    max_workload: 4,\n                    morning_labs: false,\n                    schedule_preferences: []\n                }\n            };\n            console.log('⚠️ Using emergency fallback profile');\n        }\n        // Get recent conversation history\n        const recentMessages = await (0,_lib_langchain_memory__WEBPACK_IMPORTED_MODULE_4__.getRecentMessages)(sessionId, 6);\n        // Search for relevant information using vector search with error handling\n        let searchResults = [];\n        try {\n            searchResults = await (0,_lib_search__WEBPACK_IMPORTED_MODULE_3__.searchCourses)(message, {\n                term: profile.current_term,\n                skills: profile.goal_tags\n            });\n        } catch (error) {\n            console.error('❌ Error searching courses:', error);\n            // Use demo data as fallback\n            searchResults = [\n                {\n                    id: \"ECE486\",\n                    title: \"Robot Dynamics and Control\",\n                    dept: \"ECE\",\n                    number: 486,\n                    units: 0.5,\n                    level: 400,\n                    description: \"Advanced course covering robot kinematics, dynamics, and control systems.\",\n                    terms_offered: [\n                        \"F\",\n                        \"W\"\n                    ],\n                    prereqs: \"ECE 380, MATH 211\",\n                    skills: [\n                        \"robotics\",\n                        \"control\",\n                        \"dynamics\"\n                    ],\n                    workload: {\n                        reading: 3,\n                        assignments: 4,\n                        projects: 2,\n                        labs: 2\n                    },\n                    assessments: {\n                        midterm: 30,\n                        final: 40,\n                        assignments: 20,\n                        project: 10\n                    },\n                    source_url: \"https://uwaterloo.ca/electrical-computer-engineering/undergraduate-studies/course-catalog/ece-486\"\n                }\n            ];\n            console.log('⚠️ Using demo data due to search error');\n        }\n        // Search for specializations, certificates, and diplomas\n        // Use program from profile, or try to extract from conversation if empty\n        const programToSearch = profile.program || extractProgramFromMessage(message) || 'Software Engineering';\n        console.log(`🔍 Using program for search: \"${programToSearch}\" (from profile: \"${profile.program}\")`);\n        // If we extracted a program from the message and the profile doesn't have one, update it\n        if (!profile.program && extractProgramFromMessage(message)) {\n            console.log(`🔄 Updating user profile with program: ${programToSearch}`);\n            try {\n                await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from('profiles').update({\n                    program: programToSearch\n                }).eq('user_id', profile.user_id);\n            } catch (error) {\n                console.error('Failed to update profile:', error);\n            }\n        }\n        // Search for information with error handling\n        let specializations = [];\n        let certificates = [];\n        let diplomas = [];\n        let docChunks = [];\n        try {\n            specializations = await (0,_lib_search__WEBPACK_IMPORTED_MODULE_3__.searchSpecializations)(message, programToSearch, 3);\n        } catch (error) {\n            console.error('❌ Error searching specializations:', error);\n        }\n        try {\n            certificates = await (0,_lib_search__WEBPACK_IMPORTED_MODULE_3__.searchCertificates)(message, programToSearch, 3);\n        } catch (error) {\n            console.error('❌ Error searching certificates:', error);\n        }\n        try {\n            diplomas = await (0,_lib_search__WEBPACK_IMPORTED_MODULE_3__.searchDiplomas)(message, programToSearch, 3);\n        } catch (error) {\n            console.error('❌ Error searching diplomas:', error);\n        }\n        try {\n            // Get relevant document chunks for RAG\n            docChunks = await (0,_lib_search__WEBPACK_IMPORTED_MODULE_3__.searchElectiveDocs)(message, 0.6, 5);\n        } catch (error) {\n            console.error('❌ Error searching document chunks:', error);\n        }\n        // Build context for the LLM\n        const context = buildContext(searchResults, docChunks, profile, specializations, certificates, diplomas);\n        // Check if we should ask about completed electives\n        const shouldAskAboutElectives = shouldAskAboutCompletedElectives(message, profile);\n        // Create conversation messages\n        const messages = [\n            {\n                role: 'system',\n                content: getSystemPrompt(profile)\n            },\n            ...recentMessages.map((msg)=>({\n                    role: msg._getType() === 'human' ? 'user' : 'assistant',\n                    content: typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content)\n                })),\n            {\n                role: 'user',\n                content: `${message}\\n\\nContext:\\n${context}${shouldAskAboutElectives ? '\\n\\nNOTE: The user may need to specify their completed electives for better recommendations.' : ''}`\n            }\n        ];\n        // Get AI response\n        const aiResponse = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_2__.getChatCompletion)(messages);\n        // Save messages to database\n        await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from('messages').insert([\n            {\n                session_id: sessionId,\n                role: 'user',\n                content: message,\n                tokens: Math.ceil(message.length / 4)\n            },\n            {\n                session_id: sessionId,\n                role: 'assistant',\n                content: aiResponse,\n                tokens: Math.ceil(aiResponse.length / 4),\n                citations: docChunks.map((chunk)=>({\n                        url: chunk.source_url,\n                        text: chunk.text.substring(0, 200) + '...'\n                    }))\n            }\n        ]);\n        // Generate course recommendations if relevant\n        let recommendations = [];\n        const shouldRecommend = shouldGenerateRecommendations(message);\n        console.log('🔍 Should generate recommendations?', shouldRecommend, 'for message:', message);\n        if (shouldRecommend) {\n            console.log('📚 Generating recommendations...');\n            // Use the full conversation context for better search\n            const contextQuery = buildSearchQueryFromContext(message, recentMessages);\n            console.log('🔍 Using context query for search:', contextQuery);\n            recommendations = await generateRecommendations(profile, contextQuery);\n            console.log('📚 Generated recommendations:', recommendations.length, 'courses');\n        }\n        console.log('📤 API Response:', {\n            responseLength: aiResponse.length,\n            recommendationsCount: recommendations.length,\n            recommendations: recommendations.map((r)=>({\n                    id: r.course?.id,\n                    title: r.course?.title,\n                    score: r.score\n                }))\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            response: aiResponse,\n            recommendations,\n            sources: [],\n            used_web_search: false\n        });\n    } catch (error) {\n        console.error('Chat API error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\nfunction buildContext(searchResults, docChunks, profile, specializations = [], certificates = [], diplomas = []) {\n    let context = '';\n    // Add course information\n    if (searchResults && searchResults.length > 0) {\n        context += 'Available Courses:\\n';\n        searchResults.slice(0, 5).forEach((course)=>{\n            context += `- ${course.id}: ${course.title} (${course.dept})\\n`;\n            context += `  Description: ${course.description?.substring(0, 200)}...\\n`;\n            context += `  Skills: ${course.skills?.join(', ')}\\n`;\n            context += `  Terms: ${course.terms_offered?.join(', ')}\\n\\n`;\n        });\n    }\n    // Add specializations information\n    if (specializations.length > 0) {\n        context += 'SPECIALIZATIONS AVAILABLE (use ONLY these, do not generate your own list):\\n';\n        specializations.forEach((spec, index)=>{\n            context += `${index + 1}. ${spec.name} (${spec.program})\\n`;\n            context += `   Requirements: ${spec.graduation_requirements?.substring(0, 200)}...\\n`;\n            // Show required courses\n            if (spec.course_requirements?.required?.length > 0) {\n                context += `   Required Courses: ${spec.course_requirements.required.join(', ')}\\n`;\n            }\n            // Show elective courses from choose_from\n            if (spec.course_requirements?.choose_from?.examples?.length > 0) {\n                context += `   Elective Courses (choose from):\\n`;\n                spec.course_requirements.choose_from.examples.forEach((course)=>{\n                    context += `     - ${course}\\n`;\n                });\n            }\n            // Show other choose_from categories\n            if (spec.course_requirements?.choose_from) {\n                Object.entries(spec.course_requirements.choose_from).forEach(([category, courses])=>{\n                    if (category !== 'examples' && Array.isArray(courses) && courses.length > 0) {\n                        context += `   ${category.replace(/_/g, ' ').toUpperCase()}:\\n`;\n                        courses.forEach((course)=>{\n                            context += `     - ${course}\\n`;\n                        });\n                    }\n                });\n            }\n            context += '\\n';\n        });\n        context += 'IMPORTANT: Only mention these specializations above. Do not create or generate additional lists. Ask if they want to see more options.\\n\\n';\n    }\n    // Add certificates information\n    if (certificates.length > 0) {\n        context += 'CERTIFICATES AVAILABLE (use ONLY these, do not generate your own list):\\n';\n        certificates.forEach((cert, index)=>{\n            context += `${index + 1}. ${cert.name}\\n`;\n            context += `   Administered by: ${cert.administered_by}\\n`;\n            context += `   Requirements: ${cert.requirements?.substring(0, 200)}...\\n`;\n            context += '\\n';\n        });\n        context += 'IMPORTANT: Only mention these certificates above. Do not create or generate additional lists. Ask if they want to see more options.\\n\\n';\n    }\n    // Add diplomas information\n    if (diplomas.length > 0) {\n        context += 'DIPLOMAS AVAILABLE (use ONLY these, do not generate your own list):\\n';\n        diplomas.forEach((diploma, index)=>{\n            context += `${index + 1}. ${diploma.name}\\n`;\n            context += `   Administered by: ${diploma.administered_by}\\n`;\n            context += `   Requirements: ${diploma.requirements?.substring(0, 200)}...\\n`;\n            context += '\\n';\n        });\n        context += 'IMPORTANT: Only mention these diplomas above. Do not create or generate additional lists. Ask if they want to see more options.\\n\\n';\n    }\n    // Add document chunks\n    if (docChunks.length > 0) {\n        context += 'Relevant Information:\\n';\n        docChunks.forEach((chunk, index)=>{\n            context += `${index + 1}. ${chunk.text.substring(0, 300)}...\\n`;\n            context += `   Source: ${chunk.source_url}\\n\\n`;\n        });\n    }\n    // Add user profile context\n    context += `User Profile:\\n`;\n    context += `- Program: ${profile.program || 'Not specified'}\\n`;\n    context += `- Term: ${profile.current_term || 'Not specified'}\\n`;\n    context += `- Goals: ${profile.goal_tags.join(', ') || 'Not specified'}\\n`;\n    context += `- Completed: ${profile.completed_courses.join(', ') || 'None'}\\n`;\n    return context;\n}\nfunction getSystemPrompt(profile) {\n    // Convert program abbreviation to full name\n    const programAbbreviations = {\n        'ARCH': 'Architecture',\n        'AE': 'Architectural Engineering',\n        'BME': 'Biomedical Engineering',\n        'CHE': 'Chemical Engineering',\n        'CIVE': 'Civil Engineering',\n        'ECE': 'Computer Engineering',\n        'EE': 'Electrical Engineering',\n        'ENVE': 'Environmental Engineering',\n        'GEOE': 'Geological Engineering',\n        'MGT': 'Management Engineering',\n        'ME': 'Mechanical Engineering',\n        'MTE': 'Mechatronics Engineering',\n        'NANO': 'Nanotechnology Engineering',\n        'SE': 'Software Engineering',\n        'SYDE': 'Systems Design Engineering'\n    };\n    const fullProgramName = programAbbreviations[profile.program || ''] || profile.program || 'Not specified';\n    // Generate likely completed courses based on term\n    const likelyCompletedCourses = generateLikelyCompletedCourses(profile.current_term || '', profile.program || '');\n    return `Hey! 👋 I'm your friendly elective advisor here at Waterloo Engineering. I'm here to help you navigate the maze of course options and find the perfect electives for your goals!\n\nIMPORTANT: I use only plain text formatting - no asterisks, no bold, no italic text. Just regular text.\n\n**About you:**\n- Program: ${fullProgramName}\n- Current Term: ${profile.current_term || 'Not specified'}\n- Goals: ${profile.goal_tags.join(', ') || 'Not specified'}\n- Completed Courses: ${profile.completed_courses.join(', ') || 'None'}\n- Likely Completed (based on term): ${likelyCompletedCourses.join(', ')}\n\n**COURSE CONTEXT AWARENESS:**\n- I understand that as a ${profile.current_term || 'student'}, you've likely completed certain core courses\n- If you haven't specified your completed electives, I may ask you to clarify what electives you've already taken\n- I consider prerequisites when recommending courses - I won't suggest courses you can't take yet\n- I'm aware of typical course progression in ${fullProgramName} program\n\n**IMPORTANT:** If the user's program is \"Not specified\", I should ask them to specify their engineering program (e.g., Software Engineering, Computer Engineering, etc.) so I can provide accurate recommendations for specializations, certificates, and diplomas.\n\n**How I can help:**\n- Chat about course options and what might interest you\n- Explain prerequisites and requirements in simple terms\n- Help you understand how courses fit into different specializations\n- Show you available specializations, certificates, and diplomas for your program\n- Give you the real scoop on workload and term availability\n- Share career insights and why certain courses matter\n- Ask about your completed electives when relevant for better recommendations\n\n**IMPORTANT RULES:**\n- I ONLY use information provided in the context below - I never make up or generate lists\n- I show ONLY the top 3 best options from the database with their specific course requirements\n- I provide the exact course codes and names from the database (e.g., \"CS 486 Introduction to Artificial Intelligence\")\n- I ask if you want to see more options after showing the top 3\n- I never mention programs that aren't in the context (like Aerospace Engineering)\n- I'm conversational and friendly - no formal academic jargon unless needed\n- I only give recommendations when you ask for them\n- I'll ask questions to understand what you're looking for\n- I'm honest about what I know and don't know\n- I NEVER use markdown formatting like **bold** or *italic* - just use plain text\n- IMPORTANT: Use only plain text, no asterisks, no bold, no italic formatting\n- I consider your academic level and likely completed courses when making recommendations\n- If I'm unsure about your completed courses, I'll ask you to clarify\n\nJust chat with me naturally! Ask me anything about electives, courses, specializations, or your academic journey. I'm here to help make your course selection process less overwhelming and more exciting! 🚀`;\n}\n// Generate likely completed courses based on term and program\nfunction generateLikelyCompletedCourses(term, program) {\n    const likelyCourses = [];\n    if (!term) return likelyCourses;\n    // Common first year courses (1A, 1B)\n    if (term.includes('1A') || term.includes('1B')) {\n        likelyCourses.push('MATH 115', 'MATH 117', 'MATH 119', 'PHYS 115', 'CHE 102', 'GENE 121');\n    }\n    // Second year courses (2A, 2B)\n    if (term.includes('2A') || term.includes('2B')) {\n        likelyCourses.push('MATH 211', 'MATH 213', 'MATH 215', 'PHYS 125', 'PHYS 175');\n        // Program-specific courses\n        if (program === 'MTE' || program === 'ME') {\n            likelyCourses.push('MTE 100', 'MTE 100L', 'MTE 120', 'MTE 140');\n        }\n        if (program === 'ECE' || program === 'EE') {\n            likelyCourses.push('ECE 150', 'ECE 155', 'ECE 250');\n        }\n        if (program === 'SE' || program === 'CS') {\n            likelyCourses.push('CS 135', 'CS 136', 'CS 137');\n        }\n    }\n    // Third year courses (3A, 3B)\n    if (term.includes('3A') || term.includes('3B')) {\n        likelyCourses.push('MATH 237', 'MATH 239');\n        if (program === 'MTE' || program === 'ME') {\n            likelyCourses.push('MTE 220', 'MTE 240', 'MTE 320', 'MTE 340');\n        }\n        if (program === 'ECE' || program === 'EE') {\n            likelyCourses.push('ECE 222', 'ECE 250', 'ECE 380');\n        }\n        if (program === 'SE' || program === 'CS') {\n            likelyCourses.push('CS 241', 'CS 245', 'CS 246');\n        }\n    }\n    // Fourth year courses (4A, 4B)\n    if (term.includes('4A') || term.includes('4B')) {\n        if (program === 'MTE' || program === 'ME') {\n            likelyCourses.push('MTE 380', 'MTE 420', 'MTE 440');\n        }\n        if (program === 'ECE' || program === 'EE') {\n            likelyCourses.push('ECE 380', 'ECE 480');\n        }\n        if (program === 'SE' || program === 'CS') {\n            likelyCourses.push('CS 350', 'CS 370');\n        }\n    }\n    return likelyCourses;\n}\n// Determine if we should ask about completed electives\nfunction shouldAskAboutCompletedElectives(message, profile) {\n    const messageLower = message.toLowerCase();\n    // Check if user is asking for elective recommendations\n    const isElectiveQuery = messageLower.includes('elective') || messageLower.includes('cse') || messageLower.includes('recommend') || messageLower.includes('suggest');\n    // Check if user has no completed courses listed\n    const hasNoCompletedCourses = !profile.completed_courses || profile.completed_courses.length === 0;\n    // Check if user is in 2A or later (when they would have taken electives)\n    const isUpperYear = !!(profile.current_term && (profile.current_term.includes('2A') || profile.current_term.includes('2B') || profile.current_term.includes('3A') || profile.current_term.includes('3B') || profile.current_term.includes('4A') || profile.current_term.includes('4B')));\n    return isElectiveQuery && hasNoCompletedCourses && isUpperYear;\n}\nfunction shouldGenerateRecommendations(message) {\n    const messageLower = message.toLowerCase();\n    const recommendationTriggers = [\n        'recommend',\n        'recomend',\n        'reccomend',\n        'reccomendations',\n        'recommendations',\n        'suggest',\n        'courses',\n        'electives',\n        'what courses',\n        'which courses',\n        'best electives',\n        'good courses',\n        'options',\n        'course recommendations',\n        'course recomendations',\n        'course reccomendations',\n        'elective suggestions',\n        'help me choose',\n        'what electives',\n        'show me courses',\n        'give me',\n        'find courses',\n        'course options',\n        'elective options',\n        'robotics',\n        'ai',\n        'machine learning',\n        '2a',\n        '2b',\n        '3a',\n        '3b',\n        '4a',\n        '4b',\n        'plan my term',\n        'term planning',\n        'generate',\n        'give me',\n        'list',\n        'show',\n        'find',\n        'search',\n        'looking for',\n        'technical',\n        'elective',\n        'next term',\n        'future terms',\n        'what about',\n        'should i take',\n        'what should',\n        'which should'\n    ];\n    console.log('🔍 Testing recommendation trigger for:', message);\n    console.log('🔍 Message lowercased:', messageLower);\n    // Don't give recommendations for simple greetings\n    const greetings = [\n        'hello',\n        'hi',\n        'hey',\n        'good morning',\n        'good afternoon',\n        'good evening',\n        'thanks',\n        'thank you'\n    ];\n    if (greetings.some((greeting)=>messageLower.includes(greeting))) {\n        return false;\n    }\n    // Check for recommendation triggers\n    const hasTrigger = recommendationTriggers.some((trigger)=>messageLower.includes(trigger));\n    // Debug: show which triggers match\n    const matchingTriggers = recommendationTriggers.filter((trigger)=>messageLower.includes(trigger));\n    console.log('🔍 Trigger analysis:', {\n        messageLower,\n        hasTrigger,\n        matchingTriggers,\n        totalTriggers: recommendationTriggers.length\n    });\n    // Also check if message is asking for help with courses/electives\n    const courseHelpPatterns = [\n        /what.*course/i,\n        /which.*course/i,\n        /help.*course/i,\n        /elective.*help/i,\n        /course.*help/i,\n        /recommendation/i,\n        /suggestion/i\n    ];\n    const hasCourseHelp = courseHelpPatterns.some((pattern)=>pattern.test(message));\n    console.log('🔍 Recommendation check:', {\n        message: messageLower,\n        hasTrigger,\n        matchingTriggers,\n        hasCourseHelp,\n        shouldRecommend: hasTrigger || hasCourseHelp\n    });\n    return hasTrigger || hasCourseHelp;\n}\n// Build search query from conversation context\nfunction buildSearchQueryFromContext(currentMessage, recentMessages) {\n    // Extract key terms from the current message\n    const currentTerms = extractKeyTerms(currentMessage);\n    // Extract key terms from recent messages (last 3 messages)\n    const recentTerms = recentMessages.slice(-3) // Last 3 messages\n    .map((msg)=>{\n        const content = typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content);\n        return extractKeyTerms(content);\n    }).flat();\n    // Combine all terms and remove duplicates\n    const allTerms = [\n        ...new Set([\n            ...currentTerms,\n            ...recentTerms\n        ])\n    ];\n    // Filter out common words and keep meaningful terms\n    const meaningfulTerms = allTerms.filter((term)=>term.length > 2 && ![\n            'give',\n            'me',\n            'recommendations',\n            'suggestions',\n            'please',\n            'thanks',\n            'thank',\n            'you',\n            'can',\n            'help',\n            'with',\n            'the',\n            'a',\n            'an',\n            'and',\n            'or',\n            'but',\n            'in',\n            'on',\n            'at',\n            'to',\n            'for',\n            'of',\n            'with',\n            'by'\n        ].includes(term));\n    // Build a comprehensive search query\n    const searchQuery = meaningfulTerms.join(' ');\n    console.log('🔍 Context analysis:', {\n        currentMessage,\n        currentTerms,\n        recentTerms,\n        allTerms,\n        meaningfulTerms,\n        finalQuery: searchQuery\n    });\n    return searchQuery || currentMessage // Fallback to current message if no context\n    ;\n}\n// Extract key terms from a message\nfunction extractKeyTerms(message) {\n    return message.toLowerCase().replace(/[^\\w\\s]/g, ' ') // Remove special characters\n    .split(/\\s+/).filter((word)=>word.length > 2);\n}\nasync function generateRecommendations(profile, query) {\n    console.log('🔍 generateRecommendations called with:', {\n        query,\n        profile: profile.program,\n        term: profile.current_term\n    });\n    // Search for relevant courses (don't filter by term - use it as guidance only)\n    const courses = await (0,_lib_search__WEBPACK_IMPORTED_MODULE_3__.searchCourses)(query, {\n    });\n    console.log('📚 Found courses:', courses.length, 'courses');\n    if (courses.length > 0) {\n        console.log('📚 Sample course:', courses[0].id, courses[0].title);\n    }\n    // Calculate scores and generate recommendations\n    const recommendations = courses.map((course)=>{\n        const scoreData = (0,_lib_search__WEBPACK_IMPORTED_MODULE_3__.calculateCourseScore)(course, profile, profile.goal_tags);\n        console.log(`📊 Course ${course.id} score:`, scoreData.score);\n        return {\n            course,\n            ...scoreData\n        };\n    }).sort((a, b)=>b.score - a.score).slice(0, 5);\n    console.log('🎯 Final recommendations:', recommendations.length, 'recommendations');\n    return recommendations;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/demo-data.ts":
/*!******************************!*\
  !*** ./src/lib/demo-data.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   demoCourses: () => (/* binding */ demoCourses),\n/* harmony export */   demoOptions: () => (/* binding */ demoOptions),\n/* harmony export */   demoProfile: () => (/* binding */ demoProfile)\n/* harmony export */ });\n// Demo data for when Supabase is not configured\nconst demoCourses = [\n    {\n        id: \"CS246\",\n        title: \"Data Structures and Data Management\",\n        dept: \"CS\",\n        number: 246,\n        units: 0.5,\n        level: 200,\n        description: \"Introduction to data structures, algorithms, and database management systems.\",\n        terms_offered: [\n            \"F\",\n            \"W\",\n            \"S\"\n        ],\n        prereqs: \"CS 136\",\n        skills: [\n            \"programming\",\n            \"data structures\",\n            \"algorithms\"\n        ],\n        workload: {\n            reading: 2,\n            assignments: 4,\n            projects: 1,\n            labs: 2\n        },\n        assessments: {\n            midterm: 25,\n            final: 35,\n            assignments: 30,\n            labs: 10\n        },\n        source_url: \"https://uwaterloo.ca/computer-science/undergraduate-studies/course-catalog/cs-246\"\n    },\n    {\n        id: \"ECE222\",\n        title: \"Digital Computers\",\n        dept: \"ECE\",\n        number: 222,\n        units: 0.5,\n        level: 200,\n        description: \"Introduction to digital computer organization and assembly language programming.\",\n        terms_offered: [\n            \"F\",\n            \"W\"\n        ],\n        prereqs: \"ECE 150\",\n        skills: [\n            \"computer organization\",\n            \"assembly\",\n            \"hardware\"\n        ],\n        workload: {\n            reading: 2,\n            assignments: 3,\n            projects: 1,\n            labs: 2\n        },\n        assessments: {\n            midterm: 30,\n            final: 40,\n            assignments: 20,\n            labs: 10\n        },\n        source_url: \"https://uwaterloo.ca/electrical-computer-engineering/undergraduate-studies/course-catalog/ece-222\"\n    },\n    {\n        id: \"ECE486\",\n        title: \"Robot Dynamics and Control\",\n        dept: \"ECE\",\n        number: 486,\n        units: 0.5,\n        level: 400,\n        description: \"Advanced course covering robot kinematics, dynamics, and control systems.\",\n        terms_offered: [\n            \"F\",\n            \"W\"\n        ],\n        prereqs: \"ECE 380, MATH 211\",\n        skills: [\n            \"robotics\",\n            \"control\",\n            \"dynamics\"\n        ],\n        workload: {\n            reading: 3,\n            assignments: 4,\n            projects: 2,\n            labs: 2\n        },\n        assessments: {\n            midterm: 30,\n            final: 40,\n            assignments: 20,\n            project: 10\n        },\n        source_url: \"https://uwaterloo.ca/electrical-computer-engineering/undergraduate-studies/course-catalog/ece-486\"\n    },\n    {\n        id: \"MTE380\",\n        title: \"Mechatronics Systems Modelling\",\n        dept: \"MTE\",\n        number: 380,\n        units: 0.5,\n        level: 300,\n        description: \"Introduction to modeling and simulation of mechatronic systems.\",\n        terms_offered: [\n            \"F\"\n        ],\n        prereqs: \"MATH 211, MTE 100\",\n        skills: [\n            \"modelling\",\n            \"simulation\",\n            \"control\"\n        ],\n        workload: {\n            reading: 2,\n            assignments: 3,\n            projects: 2,\n            labs: 1\n        },\n        assessments: {\n            midterm: 25,\n            final: 35,\n            assignments: 25,\n            project: 15\n        },\n        source_url: \"https://uwaterloo.ca/mechanical-mechatronics-engineering/undergraduate-studies/course-catalog/mte-380\"\n    },\n    {\n        id: \"ECE488\",\n        title: \"Computer Organization and Design\",\n        dept: \"ECE\",\n        number: 488,\n        units: 0.5,\n        level: 400,\n        description: \"Computer architecture and organization. Topics include instruction set design, processor implementation, memory systems.\",\n        terms_offered: [\n            \"F\",\n            \"W\"\n        ],\n        prereqs: \"ECE 150, ECE 222\",\n        skills: [\n            \"computer architecture\",\n            \"hardware\",\n            \"systems\"\n        ],\n        workload: {\n            reading: 3,\n            assignments: 4,\n            projects: 1,\n            labs: 3\n        },\n        assessments: {\n            midterm: 30,\n            final: 40,\n            assignments: 20,\n            labs: 10\n        },\n        source_url: \"https://uwaterloo.ca/electrical-computer-engineering/undergraduate-studies/course-catalog/ece-488\"\n    },\n    {\n        id: \"ECE457A\",\n        title: \"Artificial Intelligence\",\n        dept: \"ECE\",\n        number: 457,\n        units: 0.5,\n        level: 400,\n        description: \"Introduction to artificial intelligence concepts including search, knowledge representation, and machine learning.\",\n        terms_offered: [\n            \"F\",\n            \"W\"\n        ],\n        prereqs: \"ECE 250, STAT 206\",\n        skills: [\n            \"artificial intelligence\",\n            \"machine learning\",\n            \"algorithms\"\n        ],\n        workload: {\n            reading: 3,\n            assignments: 4,\n            projects: 2,\n            labs: 1\n        },\n        assessments: {\n            midterm: 25,\n            final: 35,\n            assignments: 30,\n            project: 10\n        },\n        source_url: \"https://uwaterloo.ca/electrical-computer-engineering/undergraduate-studies/course-catalog/ece-457a\"\n    },\n    {\n        id: \"CS486\",\n        title: \"Introduction to Artificial Intelligence\",\n        dept: \"CS\",\n        number: 486,\n        units: 0.5,\n        level: 400,\n        description: \"Introduction to artificial intelligence including machine learning, neural networks, and AI applications.\",\n        terms_offered: [\n            \"F\",\n            \"W\",\n            \"S\"\n        ],\n        prereqs: \"CS 241, STAT 206\",\n        skills: [\n            \"artificial intelligence\",\n            \"machine learning\",\n            \"neural networks\",\n            \"algorithms\"\n        ],\n        workload: {\n            reading: 3,\n            assignments: 4,\n            projects: 2,\n            labs: 1\n        },\n        assessments: {\n            midterm: 25,\n            final: 35,\n            assignments: 30,\n            project: 10\n        },\n        source_url: \"https://uwaterloo.ca/computer-science/undergraduate-studies/course-catalog/cs-486\"\n    },\n    {\n        id: \"CS448\",\n        title: \"Machine Learning\",\n        dept: \"CS\",\n        number: 448,\n        units: 0.5,\n        level: 400,\n        description: \"Introduction to machine learning algorithms, statistical learning, and data mining techniques.\",\n        terms_offered: [\n            \"F\",\n            \"W\"\n        ],\n        prereqs: \"CS 241, STAT 206, MATH 211\",\n        skills: [\n            \"machine learning\",\n            \"statistical learning\",\n            \"data mining\",\n            \"algorithms\"\n        ],\n        workload: {\n            reading: 4,\n            assignments: 4,\n            projects: 2,\n            labs: 1\n        },\n        assessments: {\n            midterm: 20,\n            final: 30,\n            assignments: 35,\n            project: 15\n        },\n        source_url: \"https://uwaterloo.ca/computer-science/undergraduate-studies/course-catalog/cs-448\"\n    },\n    {\n        id: \"STAT330\",\n        title: \"Introduction to Statistical Learning\",\n        dept: \"STAT\",\n        number: 330,\n        units: 0.5,\n        level: 300,\n        description: \"Statistical methods for machine learning including regression, classification, and model selection.\",\n        terms_offered: [\n            \"F\",\n            \"W\",\n            \"S\"\n        ],\n        prereqs: \"STAT 206, MATH 211\",\n        skills: [\n            \"statistical learning\",\n            \"regression\",\n            \"classification\",\n            \"statistics\"\n        ],\n        workload: {\n            reading: 3,\n            assignments: 3,\n            projects: 1,\n            labs: 1\n        },\n        assessments: {\n            midterm: 30,\n            final: 40,\n            assignments: 25,\n            project: 5\n        },\n        source_url: \"https://uwaterloo.ca/statistics-and-actuarial-science/undergraduate-studies/course-catalog/stat-330\"\n    },\n    {\n        id: \"SYDE522\",\n        title: \"Robotics and Control\",\n        dept: \"SYDE\",\n        number: 522,\n        units: 0.5,\n        level: 500,\n        description: \"Advanced robotics and control systems with focus on autonomous systems and human-robot interaction.\",\n        terms_offered: [\n            \"F\"\n        ],\n        prereqs: \"SYDE 352, MTE 380\",\n        skills: [\n            \"robotics\",\n            \"autonomous systems\",\n            \"control\",\n            \"human-robot interaction\"\n        ],\n        workload: {\n            reading: 4,\n            assignments: 3,\n            projects: 3,\n            labs: 2\n        },\n        assessments: {\n            midterm: 20,\n            final: 30,\n            assignments: 25,\n            project: 25\n        },\n        source_url: \"https://uwaterloo.ca/systems-design-engineering/undergraduate-studies/course-catalog/syde-522\"\n    }\n];\nconst demoOptions = [\n    {\n        id: \"robotics-option\",\n        name: \"Robotics Option\",\n        program: \"MTE\",\n        faculty: \"Engineering\",\n        required_courses: [\n            \"ECE486\"\n        ],\n        selective_rules: {\n            selectNfrom: [\n                \"MTE380\",\n                \"ECE488\",\n                \"SYDE522\"\n            ],\n            N: 2\n        },\n        description: \"Specialization in robotics and automation systems, covering control theory, robot dynamics, and mechatronic design.\",\n        source_url: \"https://uwaterloo.ca/mechanical-mechatronics-engineering/undergraduate-studies/options/robotics\"\n    },\n    {\n        id: \"ai-option\",\n        name: \"Artificial Intelligence Option\",\n        program: \"ECE\",\n        faculty: \"Engineering\",\n        required_courses: [\n            \"ECE457A\"\n        ],\n        selective_rules: {\n            selectNfrom: [\n                \"ECE457B\",\n                \"ECE457C\",\n                \"ECE457D\"\n            ],\n            N: 2\n        },\n        description: \"Focus on artificial intelligence, machine learning, and intelligent systems.\",\n        source_url: \"https://uwaterloo.ca/electrical-computer-engineering/undergraduate-studies/options/artificial-intelligence\"\n    }\n];\nconst demoProfile = {\n    user_id: \"demo-user\",\n    program: \"MTE\",\n    current_term: \"2A\",\n    completed_courses: [\n        \"ECE100\",\n        \"ECE150\",\n        \"MATH211\"\n    ],\n    planned_courses: [],\n    gpa: 3.5,\n    interests: [\n        \"robotics\",\n        \"control\",\n        \"embedded systems\"\n    ],\n    goal_tags: [\n        \"career_robotics\",\n        \"industry_work\"\n    ],\n    constraints: {\n        max_workload: 4,\n        morning_labs: false,\n        schedule_preferences: []\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/demo-data.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/langchain-memory.ts":
/*!*************************************!*\
  !*** ./src/lib/langchain-memory.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseChatMessageHistory: () => (/* binding */ SupabaseChatMessageHistory),\n/* harmony export */   createChatMemory: () => (/* binding */ createChatMemory),\n/* harmony export */   getRecentMessages: () => (/* binding */ getRecentMessages)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_chat_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/chat_history */ \"(rsc)/./node_modules/@langchain/core/chat_history.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./src/lib/supabase.ts\");\n\n\n\nclass SupabaseChatMessageHistory extends _langchain_core_chat_history__WEBPACK_IMPORTED_MODULE_0__.BaseChatMessageHistory {\n    constructor(sessionId, userId){\n        super();\n        this.sessionId = sessionId;\n        this.userId = userId;\n    }\n    async getMessages() {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from('messages').select('*').eq('session_id', this.sessionId).order('created_at', {\n            ascending: true\n        });\n        if (error) {\n            console.error('Error fetching messages:', error);\n            return [];\n        }\n        return (data || []).map((msg)=>{\n            switch(msg.role){\n                case 'user':\n                    return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(msg.content);\n                case 'assistant':\n                    return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.AIMessage(msg.content);\n                case 'system':\n                    return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.SystemMessage(msg.content);\n                default:\n                    return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(msg.content);\n            }\n        });\n    }\n    async addMessage(message) {\n        const role = message._getType() === 'human' ? 'user' : message._getType() === 'ai' ? 'assistant' : 'system';\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from('messages').insert({\n            session_id: this.sessionId,\n            role,\n            content: message.content,\n            tokens: this.estimateTokens(message.content)\n        });\n        if (error) {\n            console.error('Error adding message:', error);\n        }\n    }\n    async addUserMessage(message) {\n        await this.addMessage(new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(message));\n    }\n    async addAIMessage(message) {\n        await this.addMessage(new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.AIMessage(message));\n    }\n    async clear() {\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from('messages').delete().eq('session_id', this.sessionId);\n        if (error) {\n            console.error('Error clearing messages:', error);\n        }\n    }\n    estimateTokens(text) {\n        // Rough estimation: 1 token ≈ 4 characters for English text\n        return Math.ceil(text.length / 4);\n    }\n}\n// Memory factory\nfunction createChatMemory(sessionId, userId) {\n    return new SupabaseChatMessageHistory(sessionId, userId);\n}\n// Get recent messages for context (last N messages)\nasync function getRecentMessages(sessionId, limit = 10) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from('messages').select('*').eq('session_id', sessionId).order('created_at', {\n        ascending: false\n    }).limit(limit);\n    if (error) {\n        console.error('Error fetching recent messages:', error);\n        return [];\n    }\n    return (data || []).reverse().map((msg)=>{\n        switch(msg.role){\n            case 'user':\n                return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(msg.content);\n            case 'assistant':\n                return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.AIMessage(msg.content);\n            case 'system':\n                return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.SystemMessage(msg.content);\n            default:\n                return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(msg.content);\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/langchain-memory.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/openai.ts":
/*!***************************!*\
  !*** ./src/lib/openai.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getChatCompletion: () => (/* binding */ getChatCompletion),\n/* harmony export */   getEmbedding: () => (/* binding */ getEmbedding),\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\n// Check OpenAI configuration\nconst openaiApiKey = process.env.OPENAI_API_KEY;\nconsole.log('🔧 OpenAI Configuration:');\nconsole.log('  OPENAI_API_KEY:', openaiApiKey ? '✅ SET' : '❌ NOT SET');\nif (!openaiApiKey) {\n    console.warn('⚠️ OpenAI API key not set. Please add OPENAI_API_KEY to your .env.local file');\n}\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: openaiApiKey\n});\n\n// Embedding function for RAG\nasync function getEmbedding(text) {\n    const response = await openai.embeddings.create({\n        model: 'text-embedding-3-large',\n        input: text\n    });\n    return response.data[0].embedding;\n}\n// Chat completion for the chatbot\nasync function getChatCompletion(messages, temperature = 0.2) {\n    const response = await openai.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages,\n        temperature,\n        max_tokens: 1000\n    });\n    return response.choices[0].message.content || '';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL29wZW5haS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJCO0FBRTNCLDZCQUE2QjtBQUM3QixNQUFNQyxlQUFlQyxRQUFRQyxHQUFHLENBQUNDLGNBQWM7QUFDL0NDLFFBQVFDLEdBQUcsQ0FBQztBQUNaRCxRQUFRQyxHQUFHLENBQUMscUJBQXFCTCxlQUFlLFVBQVU7QUFFMUQsSUFBSSxDQUFDQSxjQUFjO0lBQ2pCSSxRQUFRRSxJQUFJLENBQUM7QUFDZjtBQUVBLE1BQU1DLFNBQVMsSUFBSVIsOENBQU1BLENBQUM7SUFDeEJTLFFBQVFSO0FBQ1Y7QUFFaUI7QUFFakIsNkJBQTZCO0FBQ3RCLGVBQWVTLGFBQWFDLElBQVk7SUFDN0MsTUFBTUMsV0FBVyxNQUFNSixPQUFPSyxVQUFVLENBQUNDLE1BQU0sQ0FBQztRQUM5Q0MsT0FBTztRQUNQQyxPQUFPTDtJQUNUO0lBRUEsT0FBT0MsU0FBU0ssSUFBSSxDQUFDLEVBQUUsQ0FBQ0MsU0FBUztBQUNuQztBQUVBLGtDQUFrQztBQUMzQixlQUFlQyxrQkFDcEJDLFFBQTJFLEVBQzNFQyxjQUFzQixHQUFHO0lBRXpCLE1BQU1ULFdBQVcsTUFBTUosT0FBT2MsSUFBSSxDQUFDQyxXQUFXLENBQUNULE1BQU0sQ0FBQztRQUNwREMsT0FBTztRQUNQSztRQUNBQztRQUNBRyxZQUFZO0lBQ2Q7SUFFQSxPQUFPWixTQUFTYSxPQUFPLENBQUMsRUFBRSxDQUFDQyxPQUFPLENBQUNDLE9BQU8sSUFBSTtBQUNoRCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzaGlsb1xcRWxlY3RpdmUgQ2hvb3NlclxcZnJvbnRlbmRcXHNyY1xcbGliXFxvcGVuYWkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9wZW5BSSBmcm9tICdvcGVuYWknXHJcblxyXG4vLyBDaGVjayBPcGVuQUkgY29uZmlndXJhdGlvblxyXG5jb25zdCBvcGVuYWlBcGlLZXkgPSBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWVxyXG5jb25zb2xlLmxvZygn8J+UpyBPcGVuQUkgQ29uZmlndXJhdGlvbjonKVxyXG5jb25zb2xlLmxvZygnICBPUEVOQUlfQVBJX0tFWTonLCBvcGVuYWlBcGlLZXkgPyAn4pyFIFNFVCcgOiAn4p2MIE5PVCBTRVQnKVxyXG5cclxuaWYgKCFvcGVuYWlBcGlLZXkpIHtcclxuICBjb25zb2xlLndhcm4oJ+KaoO+4jyBPcGVuQUkgQVBJIGtleSBub3Qgc2V0LiBQbGVhc2UgYWRkIE9QRU5BSV9BUElfS0VZIHRvIHlvdXIgLmVudi5sb2NhbCBmaWxlJylcclxufVxyXG5cclxuY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSSh7XHJcbiAgYXBpS2V5OiBvcGVuYWlBcGlLZXksXHJcbn0pXHJcblxyXG5leHBvcnQgeyBvcGVuYWkgfVxyXG5cclxuLy8gRW1iZWRkaW5nIGZ1bmN0aW9uIGZvciBSQUdcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEVtYmVkZGluZyh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcltdPiB7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBvcGVuYWkuZW1iZWRkaW5ncy5jcmVhdGUoe1xyXG4gICAgbW9kZWw6ICd0ZXh0LWVtYmVkZGluZy0zLWxhcmdlJyxcclxuICAgIGlucHV0OiB0ZXh0LFxyXG4gIH0pXHJcbiAgXHJcbiAgcmV0dXJuIHJlc3BvbnNlLmRhdGFbMF0uZW1iZWRkaW5nXHJcbn1cclxuXHJcbi8vIENoYXQgY29tcGxldGlvbiBmb3IgdGhlIGNoYXRib3RcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENoYXRDb21wbGV0aW9uKFxyXG4gIG1lc3NhZ2VzOiBBcnJheTx7IHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnIHwgJ3N5c3RlbSc7IGNvbnRlbnQ6IHN0cmluZyB9PixcclxuICB0ZW1wZXJhdHVyZTogbnVtYmVyID0gMC4yXHJcbik6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBvcGVuYWkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoe1xyXG4gICAgbW9kZWw6ICdncHQtNG8tbWluaScsXHJcbiAgICBtZXNzYWdlcyxcclxuICAgIHRlbXBlcmF0dXJlLFxyXG4gICAgbWF4X3Rva2VuczogMTAwMCxcclxuICB9KVxyXG4gIFxyXG4gIHJldHVybiByZXNwb25zZS5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudCB8fCAnJ1xyXG59XHJcbiJdLCJuYW1lcyI6WyJPcGVuQUkiLCJvcGVuYWlBcGlLZXkiLCJwcm9jZXNzIiwiZW52IiwiT1BFTkFJX0FQSV9LRVkiLCJjb25zb2xlIiwibG9nIiwid2FybiIsIm9wZW5haSIsImFwaUtleSIsImdldEVtYmVkZGluZyIsInRleHQiLCJyZXNwb25zZSIsImVtYmVkZGluZ3MiLCJjcmVhdGUiLCJtb2RlbCIsImlucHV0IiwiZGF0YSIsImVtYmVkZGluZyIsImdldENoYXRDb21wbGV0aW9uIiwibWVzc2FnZXMiLCJ0ZW1wZXJhdHVyZSIsImNoYXQiLCJjb21wbGV0aW9ucyIsIm1heF90b2tlbnMiLCJjaG9pY2VzIiwibWVzc2FnZSIsImNvbnRlbnQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/openai.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/search.ts":
/*!***************************!*\
  !*** ./src/lib/search.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateCourseScore: () => (/* binding */ calculateCourseScore),\n/* harmony export */   searchCertificates: () => (/* binding */ searchCertificates),\n/* harmony export */   searchCourses: () => (/* binding */ searchCourses),\n/* harmony export */   searchDiplomas: () => (/* binding */ searchDiplomas),\n/* harmony export */   searchElectiveDocs: () => (/* binding */ searchElectiveDocs),\n/* harmony export */   searchSpecializations: () => (/* binding */ searchSpecializations)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./src/lib/supabase.ts\");\n/* harmony import */ var _openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./openai */ \"(rsc)/./src/lib/openai.ts\");\n/* harmony import */ var _demo_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./demo-data */ \"(rsc)/./src/lib/demo-data.ts\");\n\n\n\n// Map program abbreviations to full names\nconst PROGRAM_ABBREVIATIONS = {\n    'ARCH': 'Architecture',\n    'AE': 'Architectural Engineering',\n    'BME': 'Biomedical Engineering',\n    'CHE': 'Chemical Engineering',\n    'CIVE': 'Civil Engineering',\n    'ECE': 'Computer Engineering',\n    'EE': 'Electrical Engineering',\n    'ENVE': 'Environmental Engineering',\n    'GEOE': 'Geological Engineering',\n    'MGT': 'Management Engineering',\n    'ME': 'Mechanical Engineering',\n    'MTE': 'Mechatronics Engineering',\n    'NANO': 'Nanotechnology Engineering',\n    'SE': 'Software Engineering',\n    'SYDE': 'Systems Design Engineering'\n};\n// Convert program abbreviation to full name\nfunction getFullProgramName(abbreviation) {\n    return PROGRAM_ABBREVIATIONS[abbreviation] || abbreviation;\n}\n// Vector similarity search for RAG\nasync function searchElectiveDocs(query, threshold = 0.5, limit = 10) {\n    const queryEmbedding = await (0,_openai__WEBPACK_IMPORTED_MODULE_1__.getEmbedding)(query);\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc('search_elective_docs', {\n        query_embedding: queryEmbedding,\n        match_threshold: threshold,\n        match_count: limit\n    });\n    if (error) {\n        console.error('Vector search error:', error);\n        return [];\n    }\n    return data || [];\n}\n// Course search with filters\nasync function searchCourses(query, filters = {}, limit = 20) {\n    console.log('🔍 searchCourses called with:', {\n        query,\n        filters,\n        limit\n    });\n    console.log('🔍 NEW VERSION - Updated search function is running!');\n    // Check if this is a CSE elective query (only when explicitly mentioned)\n    const isCSEQuery = query.toLowerCase().includes('cse') || query.toLowerCase().includes('complementary studies');\n    if (isCSEQuery) {\n        console.log('🔍 Detected CSE query, searching courses table for CSE electives');\n        try {\n            // Search for courses that are CSE electives (typically 100-200 level non-engineering courses)\n            const { data: cseCourses, error: cseError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('courses').select('*').or('title.ilike.%ethics%,title.ilike.%society%,title.ilike.%sustainability%,title.ilike.%social%,title.ilike.%environment%').limit(limit);\n            if (!cseError && cseCourses && cseCourses.length > 0) {\n                console.log('✅ Found CSE electives:', cseCourses.length);\n                return cseCourses;\n            } else {\n                console.log('⚠️ No CSE electives found in courses table');\n            }\n        } catch (error) {\n            console.log('⚠️ CSE search failed:', error);\n        }\n    }\n    // Skip vector search for now - use text search directly\n    console.log('🔍 Skipping vector search, using text search directly');\n    // Fallback to text search\n    let supabaseQuery = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('courses').select('*').limit(limit);\n    // Apply text search\n    if (query) {\n        // Extract key terms from the query for better matching\n        const keyTerms = query.toLowerCase().replace(/[^\\w\\s]/g, ' ') // Remove special characters including commas\n        .split(/\\s+/).filter((term)=>term.length > 2 && ![\n                'what',\n                'can',\n                'i',\n                'choose',\n                'to',\n                'do',\n                'want',\n                'the',\n                'and',\n                'or',\n                'for',\n                'with',\n                'about',\n                'from',\n                'are',\n                'is',\n                'in',\n                'on',\n                'at',\n                'by',\n                'of',\n                'a',\n                'an',\n                'havent',\n                'taken',\n                'any',\n                'give',\n                'me',\n                'please'\n            ].includes(term)).slice(0, 3) // Take top 3 key terms\n        ;\n        console.log('🔍 Extracted key terms:', keyTerms);\n        if (keyTerms.length > 0) {\n            // Build search conditions for each key term\n            const searchConditions = keyTerms.map((term)=>{\n                const cleanTerm = term.replace(/[%_]/g, '\\\\$&');\n                return `title.ilike.%${cleanTerm}%,description.ilike.%${cleanTerm}%,skills.cs.[\"${cleanTerm}\"]`;\n            }).join(',');\n            supabaseQuery = supabaseQuery.or(searchConditions);\n        } else {\n            // Fallback to searching for common elective terms\n            supabaseQuery = supabaseQuery.or(`title.ilike.%elective%,description.ilike.%elective%,title.ilike.%course%,description.ilike.%course%`);\n        }\n        // If no results found, try broader search terms\n        if (keyTerms.includes('machine') || keyTerms.includes('learning')) {\n            console.log('🔍 Adding AI/ML related search terms');\n            supabaseQuery = supabaseQuery.or(`title.ilike.%artificial%,title.ilike.%intelligence%,title.ilike.%ai%,title.ilike.%ml%,description.ilike.%artificial%,description.ilike.%intelligence%,description.ilike.%ai%,description.ilike.%ml%`);\n        }\n    }\n    // Apply filters (but don't restrict by term - use it as guidance only)\n    if (filters.term) {\n        console.log('🔍 Term filter provided but not applied - showing courses for all terms');\n    // Note: We don't filter by term to allow future course recommendations\n    }\n    if (filters.dept && filters.dept.length > 0) {\n        supabaseQuery = supabaseQuery.in('dept', filters.dept);\n    }\n    if (filters.level && filters.level.length > 0) {\n        supabaseQuery = supabaseQuery.in('level', filters.level);\n    }\n    if (filters.skills && filters.skills.length > 0) {\n        console.log('🔍 Applying skills filter:', filters.skills);\n        // Use the correct JSONB operator for array intersection\n        supabaseQuery = supabaseQuery.filter('skills', 'cs', `[\"${filters.skills.join('\",\"')}\"]`);\n    }\n    if (filters.max_workload) {\n        // Assuming workload is stored as a composite score\n        supabaseQuery = supabaseQuery.lte('workload->total', filters.max_workload);\n    }\n    console.log('🔍 Executing database query...');\n    console.log('🔍 Query details:', {\n        query,\n        filters,\n        limit\n    });\n    // First, let's test if we can query the database at all\n    const { data: testData, error: testError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('courses').select('id, title').limit(3);\n    console.log('🔍 Database connectivity test:', {\n        testFound: testData?.length || 0,\n        testError: testError?.message || 'None',\n        sampleCourses: testData?.slice(0, 2).map((c)=>({\n                id: c.id,\n                title: c.title\n            })) || []\n    });\n    const { data, error } = await supabaseQuery;\n    if (error) {\n        console.error('❌ Course search error:', error);\n        return [];\n    }\n    console.log('📚 Database search result:', {\n        found: data?.length || 0,\n        query,\n        filters\n    });\n    if (data && data.length > 0) {\n        console.log('📚 Sample courses found:', data.slice(0, 3).map((c)=>({\n                id: c.id,\n                title: c.title\n            })));\n    }\n    // If no data found in database, fall back to demo data\n    if (!data || data.length === 0) {\n        console.log('📚 No courses found in database, using demo data');\n        const demoResults = filterDemoCourses(query, filters, limit);\n        console.log('📚 Demo data results:', demoResults.length);\n        return demoResults;\n    }\n    console.log('✅ Database search returned', data.length, 'courses');\n    return data || [];\n}\n// Extract meaningful keywords from query\nfunction extractSearchKeywords(query) {\n    // Remove common words and extract meaningful terms\n    const stopWords = [\n        'i',\n        'havent',\n        'have',\n        'taken',\n        'any',\n        'can',\n        'you',\n        'give',\n        'me',\n        'recommendations',\n        'for',\n        'please',\n        'the',\n        'a',\n        'an',\n        'and',\n        'or',\n        'but',\n        'in',\n        'on',\n        'at',\n        'to',\n        'for',\n        'of',\n        'with',\n        'by'\n    ];\n    return query.toLowerCase().replace(/[^\\w\\s]/g, ' ') // Remove special characters\n    .split(/\\s+/).filter((word)=>word.length > 2 && !stopWords.includes(word)).slice(0, 3) // Take top 3 keywords\n    ;\n}\n// Search specializations\nasync function searchSpecializations(query, program, limit = 3) {\n    let supabaseQuery = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('specializations').select('*').limit(limit);\n    // Apply text search with extracted keywords\n    if (query) {\n        const keywords = extractSearchKeywords(query);\n        if (keywords.length > 0) {\n            const searchConditions = keywords.map((keyword)=>{\n                const cleanKeyword = keyword.replace(/[%_]/g, '\\\\$&');\n                return `name.ilike.%${cleanKeyword}%,description.ilike.%${cleanKeyword}%`;\n            }).join(',');\n            supabaseQuery = supabaseQuery.or(searchConditions);\n        }\n    }\n    // Filter by program if specified - convert abbreviation to full name\n    if (program) {\n        const fullProgramName = getFullProgramName(program);\n        console.log(`🔍 Searching specializations for program: \"${program}\" -> \"${fullProgramName}\"`);\n        supabaseQuery = supabaseQuery.eq('program', fullProgramName);\n    }\n    const { data, error } = await supabaseQuery;\n    if (error) {\n        console.error('Specialization search error:', error);\n        return [];\n    }\n    console.log(`✅ Found ${data?.length || 0} specializations for program: ${program}`);\n    return data || [];\n}\n// Search certificates\nasync function searchCertificates(query, program, limit = 3) {\n    let supabaseQuery = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('certificates').select('*').eq('uw_engineering_listed', true) // Only show engineering-listed certificates\n    .limit(limit);\n    // Apply text search with extracted keywords\n    if (query) {\n        const keywords = extractSearchKeywords(query);\n        if (keywords.length > 0) {\n            const searchConditions = keywords.map((keyword)=>{\n                const cleanKeyword = keyword.replace(/[%_]/g, '\\\\$&');\n                return `name.ilike.%${cleanKeyword}%,description.ilike.%${cleanKeyword}%`;\n            }).join(',');\n            supabaseQuery = supabaseQuery.or(searchConditions);\n        }\n    }\n    // Note: certificates table doesn't have program column, so we skip program filtering\n    if (program) {\n        console.log(`🔍 Searching certificates (no program filter available)`);\n    }\n    const { data, error } = await supabaseQuery;\n    if (error) {\n        console.error('Certificate search error:', error);\n        return [];\n    }\n    console.log(`✅ Found ${data?.length || 0} certificates for program: ${program}`);\n    return data || [];\n}\n// Search diplomas\nasync function searchDiplomas(query, program, limit = 3) {\n    let supabaseQuery = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('diplomas').select('*').eq('uw_engineering_listed', true) // Only show engineering-listed diplomas\n    .limit(limit);\n    // Apply text search with extracted keywords\n    if (query) {\n        const keywords = extractSearchKeywords(query);\n        if (keywords.length > 0) {\n            const searchConditions = keywords.map((keyword)=>{\n                const cleanKeyword = keyword.replace(/[%_]/g, '\\\\$&');\n                return `name.ilike.%${cleanKeyword}%,description.ilike.%${cleanKeyword}%`;\n            }).join(',');\n            supabaseQuery = supabaseQuery.or(searchConditions);\n        }\n    }\n    // Note: diplomas table doesn't have program column, so we skip program filtering\n    if (program) {\n        console.log(`🔍 Searching diplomas (no program filter available)`);\n    }\n    const { data, error } = await supabaseQuery;\n    if (error) {\n        console.error('Diploma search error:', error);\n        return [];\n    }\n    console.log(`✅ Found ${data?.length || 0} diplomas for program: ${program}`);\n    return data || [];\n}\n// Filter demo courses based on query and filters\nfunction filterDemoCourses(query, filters = {}, limit = 20) {\n    let filteredCourses = [\n        ..._demo_data__WEBPACK_IMPORTED_MODULE_2__.demoCourses\n    ];\n    // Apply text search\n    if (query) {\n        const queryLower = query.toLowerCase();\n        // Handle common query patterns\n        const isElectiveQuery = queryLower.includes('elective') || queryLower.includes('course') || queryLower.includes('2a') || queryLower.includes('2b') || queryLower.includes('3a') || queryLower.includes('3b');\n        const isCSEQuery = queryLower.includes('cse') || queryLower.includes('complementary studies');\n        if (isCSEQuery) {\n            // For CSE queries, show courses that match CSE themes\n            filteredCourses = filteredCourses.filter((course)=>course.title.toLowerCase().includes(queryLower) || course.description.toLowerCase().includes(queryLower) || course.skills.some((skill)=>skill.toLowerCase().includes(queryLower)) || course.id.toLowerCase().includes(queryLower) || // Show courses that match CSE themes\n                course.skills.some((skill)=>[\n                        'ethics',\n                        'society',\n                        'sustainability',\n                        'social',\n                        'environment',\n                        'complementary studies'\n                    ].some((theme)=>skill.toLowerCase().includes(theme))) || course.title.toLowerCase().includes('ethics') || course.title.toLowerCase().includes('society') || course.title.toLowerCase().includes('sustainability') || course.title.toLowerCase().includes('social') || course.title.toLowerCase().includes('environment'));\n        } else if (isElectiveQuery) {\n            // For elective queries, be more permissive and show relevant courses\n            filteredCourses = filteredCourses.filter((course)=>course.title.toLowerCase().includes(queryLower) || course.description.toLowerCase().includes(queryLower) || course.skills.some((skill)=>skill.toLowerCase().includes(queryLower)) || course.id.toLowerCase().includes(queryLower) || // Show courses that match common elective themes\n                course.skills.some((skill)=>[\n                        'programming',\n                        'software',\n                        'ai',\n                        'robotics',\n                        'data',\n                        'algorithms',\n                        'systems'\n                    ].some((theme)=>skill.toLowerCase().includes(theme))));\n        } else {\n            // For specific queries, use exact matching\n            filteredCourses = filteredCourses.filter((course)=>course.title.toLowerCase().includes(queryLower) || course.description.toLowerCase().includes(queryLower) || course.skills.some((skill)=>skill.toLowerCase().includes(queryLower)) || course.id.toLowerCase().includes(queryLower));\n        }\n    }\n    // Apply filters (but don't restrict by term - use it as guidance only)\n    if (filters.term) {\n        console.log('🔍 Demo data: Term filter provided but not applied - showing courses for all terms');\n    // Note: We don't filter by term to allow future course recommendations\n    }\n    if (filters.dept && filters.dept.length > 0) {\n        filteredCourses = filteredCourses.filter((course)=>filters.dept.includes(course.dept));\n    }\n    if (filters.level && filters.level.length > 0) {\n        filteredCourses = filteredCourses.filter((course)=>filters.level.includes(course.level));\n    }\n    if (filters.skills && filters.skills.length > 0) {\n        filteredCourses = filteredCourses.filter((course)=>course.skills.some((skill)=>filters.skills.some((filterSkill)=>skill.toLowerCase().includes(filterSkill.toLowerCase()) || filterSkill.toLowerCase().includes(skill.toLowerCase()))));\n    }\n    return filteredCourses.slice(0, limit);\n}\n// Calculate course recommendation score\nfunction calculateCourseScore(course, profile, goalTags) {\n    let score = 0;\n    const explanation = [];\n    const counts_toward = [];\n    let prereqs_met = true;\n    const next_offered = [];\n    let workload_score = 5 // Default to medium workload\n    ;\n    // Goal match (0-40 points)\n    const goalMatch = calculateGoalMatch(course, goalTags);\n    score += goalMatch.score;\n    explanation.push(...goalMatch.explanations);\n    // Program fit (0-15 points)\n    const programFit = calculateProgramFit(course, profile);\n    score += programFit.score;\n    explanation.push(...programFit.explanations);\n    // Prerequisites check (0-15 points)\n    const prereqCheck = checkPrerequisites(course, profile.completed_courses);\n    score += prereqCheck.score;\n    prereqs_met = prereqCheck.met;\n    explanation.push(...prereqCheck.explanations);\n    // Term availability (0-10 points)\n    const termCheck = checkTermAvailability(course, profile.current_term);\n    score += termCheck.score;\n    next_offered.push(...termCheck.offered_terms);\n    explanation.push(...termCheck.explanations);\n    // Workload alignment (0-10 points)\n    const workloadCheck = checkWorkloadAlignment(course, profile.constraints);\n    score += workloadCheck.score;\n    workload_score = workloadCheck.score;\n    explanation.push(...workloadCheck.explanations);\n    // Level progression (0-10 points)\n    const levelCheck = checkLevelProgression(course, profile.current_term);\n    score += levelCheck.score;\n    explanation.push(...levelCheck.explanations);\n    return {\n        score: Math.round(score),\n        explanation,\n        counts_toward,\n        prereqs_met,\n        next_offered,\n        workload_score\n    };\n}\nfunction calculateGoalMatch(course, goalTags) {\n    let score = 0;\n    const explanations = [];\n    const courseSkills = course.skills.map((s)=>s.toLowerCase());\n    const goalSkills = goalTags.map((g)=>g.toLowerCase());\n    const matches = courseSkills.filter((skill)=>goalSkills.some((goal)=>skill.includes(goal) || goal.includes(skill)));\n    if (matches.length > 0) {\n        score = Math.min(40, matches.length * 10);\n        explanations.push(`Matches your goals: ${matches.join(', ')}`);\n    } else {\n        explanations.push('Limited alignment with your stated goals');\n    }\n    return {\n        score,\n        explanations\n    };\n}\nfunction calculateProgramFit(course, profile) {\n    let score = 0;\n    const explanations = [];\n    // Check if course is from same department\n    if (profile.program && course.dept === profile.program) {\n        score += 10;\n        explanations.push(`Same department as your program (${profile.program})`);\n    } else if (profile.program) {\n        score += 5;\n        explanations.push(`Cross-departmental course (${course.dept})`);\n    }\n    // Check if course level is appropriate\n    if (profile.current_term) {\n        const termLevel = getTermLevel(profile.current_term);\n        if (course.level >= termLevel) {\n            score += 5;\n            explanations.push(`Appropriate level for ${profile.current_term}`);\n        }\n    }\n    return {\n        score,\n        explanations\n    };\n}\nfunction checkPrerequisites(course, completedCourses) {\n    let score = 0;\n    const explanations = [];\n    if (!course.prereqs) {\n        score = 15;\n        explanations.push('No prerequisites required');\n        return {\n            score,\n            met: true,\n            explanations\n        };\n    }\n    // Simple prerequisite checking - in reality, this would be more sophisticated\n    const prereqList = course.prereqs.split(',').map((p)=>p.trim());\n    const metPrereqs = prereqList.filter((prereq)=>completedCourses.some((completed)=>completed.toLowerCase().includes(prereq.toLowerCase())));\n    if (metPrereqs.length === prereqList.length) {\n        score = 15;\n        explanations.push('All prerequisites met');\n    } else if (metPrereqs.length > 0) {\n        score = 8;\n        explanations.push(`Some prerequisites met (${metPrereqs.length}/${prereqList.length})`);\n    } else {\n        score = 0;\n        explanations.push(`Prerequisites not met: ${course.prereqs}`);\n    }\n    return {\n        score,\n        met: metPrereqs.length === prereqList.length,\n        explanations\n    };\n}\nfunction checkTermAvailability(course, currentTerm) {\n    let score = 0;\n    const explanations = [];\n    const offered_terms = [];\n    if (!course.terms_offered || course.terms_offered.length === 0) {\n        explanations.push('Term availability unknown');\n        return {\n            score: 5,\n            offered_terms,\n            explanations\n        };\n    }\n    offered_terms.push(...course.terms_offered);\n    if (currentTerm) {\n        const nextTerm = getNextTerm(currentTerm);\n        if (course.terms_offered.includes(nextTerm)) {\n            score = 10;\n            explanations.push(`Offered next term (${nextTerm})`);\n        } else if (course.terms_offered.length > 0) {\n            score = 5;\n            explanations.push(`Offered in: ${course.terms_offered.join(', ')}`);\n        }\n    } else {\n        score = 5;\n        explanations.push(`Offered in: ${course.terms_offered.join(', ')}`);\n    }\n    return {\n        score,\n        offered_terms,\n        explanations\n    };\n}\nfunction checkWorkloadAlignment(course, constraints) {\n    let score = 5 // Default medium\n    ;\n    const explanations = [];\n    if (!course.workload || !constraints?.max_workload) {\n        return {\n            score,\n            explanations\n        };\n    }\n    const totalWorkload = Object.values(course.workload).reduce((sum, val)=>sum + val, 0);\n    if (totalWorkload <= constraints.max_workload) {\n        score = 10;\n        explanations.push(`Workload fits your constraints (${totalWorkload}/week)`);\n    } else {\n        score = 2;\n        explanations.push(`Heavy workload (${totalWorkload}/week)`);\n    }\n    return {\n        score,\n        explanations\n    };\n}\nfunction checkLevelProgression(course, currentTerm) {\n    let score = 5 // Default\n    ;\n    const explanations = [];\n    if (!currentTerm) {\n        return {\n            score,\n            explanations\n        };\n    }\n    const termLevel = getTermLevel(currentTerm);\n    if (course.level >= termLevel && course.level <= termLevel + 100) {\n        score = 10;\n        explanations.push(`Appropriate level for ${currentTerm}`);\n    } else if (course.level < termLevel) {\n        score = 3;\n        explanations.push(`Lower level course (${course.level}xx)`);\n    } else {\n        score = 7;\n        explanations.push(`Advanced course (${course.level}xx)`);\n    }\n    return {\n        score,\n        explanations\n    };\n}\n// Helper functions\nfunction getTermLevel(term) {\n    const termMap = {\n        '1A': 100,\n        '1B': 100,\n        '2A': 200,\n        '2B': 200,\n        '3A': 300,\n        '3B': 300,\n        '4A': 400,\n        '4B': 400\n    };\n    return termMap[term] || 200;\n}\nfunction getNextTerm(currentTerm) {\n    const termMap = {\n        '1A': '1B',\n        '1B': '2A',\n        '2A': '2B',\n        '2B': '3A',\n        '3A': '3B',\n        '3B': '4A',\n        '4A': '4B',\n        '4B': '4B'\n    };\n    return termMap[currentTerm] || '2A';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/search.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Client-side environment variables (must be prefixed with NEXT_PUBLIC_)\nconst supabaseUrl = \"https://ldjhtpdidpruzeyuxdfo.supabase.co\" || 0 || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxkamh0cGRpZHBydXpleXV4ZGZvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0NDk5ODksImV4cCI6MjA3MzAyNTk4OX0.G9z3wtweZXO0GcT2Ov0Zt9cng6lUeqA0w9KK5YYTcN4\" || 0 || 0;\n// Server-side environment variables (for API routes)\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'placeholder-service-key';\n// Detailed configuration logging\nconsole.log('🔧 Client-side Configuration Status:');\nconsole.log('  NEXT_PUBLIC_SUPABASE_URL:',  true ? '✅ SET' : 0);\nconsole.log('  NEXT_PUBLIC_SUPABASE_ANON_KEY:',  true ? '✅ SET' : 0);\nconsole.log('  Fallback SUPABASE_URL:', process.env.SUPABASE_URL ? '✅ SET' : '❌ NOT SET');\nconsole.log('  Fallback SUPABASE_KEY:', process.env.SUPABASE_KEY ? '✅ SET' : '❌ NOT SET');\n// Check if environment variables are properly set\nif (supabaseUrl === 'https://placeholder.supabase.co' || supabaseAnonKey === 'placeholder-key') {\n    console.warn('⚠️ Supabase environment variables not configured for client-side.');\n    console.warn('📝 Required variables for client-side:');\n    console.warn('   NEXT_PUBLIC_SUPABASE_URL=your_supabase_url');\n    console.warn('   NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key');\n    console.warn('📝 Or add the non-prefixed versions to your .env file');\n} else {\n    console.log('✅ Supabase client configured successfully!');\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        persistSession: false\n    }\n});\n// For server-side operations that need elevated permissions\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        persistSession: false\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N1cGFiYXNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDtBQUVwRCx5RUFBeUU7QUFDekUsTUFBTUMsY0FBc0JDLDBDQUFvQyxJQUFJQSxDQUF3QixJQUFJLENBQWlDO0FBQ2pJLE1BQU1JLGtCQUEwQkosa05BQXlDLElBQUlBLENBQXdCLElBQUksQ0FBaUI7QUFFMUgscURBQXFEO0FBQ3JELE1BQU1PLHFCQUE2QlAsUUFBUUMsR0FBRyxDQUFDTyx5QkFBeUIsSUFBSTtBQUU1RSxpQ0FBaUM7QUFDakNDLFFBQVFDLEdBQUcsQ0FBQztBQUNaRCxRQUFRQyxHQUFHLENBQUMsK0JBQStCVixLQUFvQyxHQUFHLFVBQVUsQ0FBVztBQUN2R1MsUUFBUUMsR0FBRyxDQUFDLG9DQUFvQ1YsS0FBeUMsR0FBRyxVQUFVLENBQVc7QUFDakhTLFFBQVFDLEdBQUcsQ0FBQyw0QkFBNEJWLFFBQVFDLEdBQUcsQ0FBQ0UsWUFBWSxHQUFHLFVBQVU7QUFDN0VNLFFBQVFDLEdBQUcsQ0FBQyw0QkFBNEJWLFFBQVFDLEdBQUcsQ0FBQ0ssWUFBWSxHQUFHLFVBQVU7QUFFN0Usa0RBQWtEO0FBQ2xELElBQUlQLGdCQUFnQixxQ0FBcUNLLG9CQUFvQixtQkFBbUI7SUFDOUZLLFFBQVFFLElBQUksQ0FBQztJQUNiRixRQUFRRSxJQUFJLENBQUM7SUFDYkYsUUFBUUUsSUFBSSxDQUFDO0lBQ2JGLFFBQVFFLElBQUksQ0FBQztJQUNiRixRQUFRRSxJQUFJLENBQUM7QUFDZixPQUFPO0lBQ0xGLFFBQVFDLEdBQUcsQ0FBQztBQUNkO0FBRU8sTUFBTUUsV0FBV2QsbUVBQVlBLENBQUNDLGFBQWFLLGlCQUFpQjtJQUNqRVMsTUFBTTtRQUNKQyxnQkFBZ0I7SUFDbEI7QUFDRixHQUFFO0FBRUYsNERBQTREO0FBQ3JELE1BQU1DLGdCQUFnQmpCLG1FQUFZQSxDQUN2Q0MsYUFDQVEsb0JBQ0E7SUFDRU0sTUFBTTtRQUNKQyxnQkFBZ0I7SUFDbEI7QUFDRixHQUNEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNoaWxvXFxFbGVjdGl2ZSBDaG9vc2VyXFxmcm9udGVuZFxcc3JjXFxsaWJcXHN1cGFiYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcblxuLy8gQ2xpZW50LXNpZGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIChtdXN0IGJlIHByZWZpeGVkIHdpdGggTkVYVF9QVUJMSUNfKVxuY29uc3Qgc3VwYWJhc2VVcmw6IHN0cmluZyA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCBwcm9jZXNzLmVudi5TVVBBQkFTRV9VUkwgfHwgJ2h0dHBzOi8vcGxhY2Vob2xkZXIuc3VwYWJhc2UuY28nXG5jb25zdCBzdXBhYmFzZUFub25LZXk6IHN0cmluZyA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIHx8IHByb2Nlc3MuZW52LlNVUEFCQVNFX0tFWSB8fCAncGxhY2Vob2xkZXIta2V5J1xuXG4vLyBTZXJ2ZXItc2lkZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgKGZvciBBUEkgcm91dGVzKVxuY29uc3Qgc3VwYWJhc2VTZXJ2aWNlS2V5OiBzdHJpbmcgPSBwcm9jZXNzLmVudi5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZIHx8ICdwbGFjZWhvbGRlci1zZXJ2aWNlLWtleSdcblxuLy8gRGV0YWlsZWQgY29uZmlndXJhdGlvbiBsb2dnaW5nXG5jb25zb2xlLmxvZygn8J+UpyBDbGllbnQtc2lkZSBDb25maWd1cmF0aW9uIFN0YXR1czonKVxuY29uc29sZS5sb2coJyAgTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMOicsIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCA/ICfinIUgU0VUJyA6ICfinYwgTk9UIFNFVCcpXG5jb25zb2xlLmxvZygnICBORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWTonLCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSA/ICfinIUgU0VUJyA6ICfinYwgTk9UIFNFVCcpXG5jb25zb2xlLmxvZygnICBGYWxsYmFjayBTVVBBQkFTRV9VUkw6JywgcHJvY2Vzcy5lbnYuU1VQQUJBU0VfVVJMID8gJ+KchSBTRVQnIDogJ+KdjCBOT1QgU0VUJylcbmNvbnNvbGUubG9nKCcgIEZhbGxiYWNrIFNVUEFCQVNFX0tFWTonLCBwcm9jZXNzLmVudi5TVVBBQkFTRV9LRVkgPyAn4pyFIFNFVCcgOiAn4p2MIE5PVCBTRVQnKVxuXG4vLyBDaGVjayBpZiBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXJlIHByb3Blcmx5IHNldFxuaWYgKHN1cGFiYXNlVXJsID09PSAnaHR0cHM6Ly9wbGFjZWhvbGRlci5zdXBhYmFzZS5jbycgfHwgc3VwYWJhc2VBbm9uS2V5ID09PSAncGxhY2Vob2xkZXIta2V5Jykge1xuICBjb25zb2xlLndhcm4oJ+KaoO+4jyBTdXBhYmFzZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgbm90IGNvbmZpZ3VyZWQgZm9yIGNsaWVudC1zaWRlLicpXG4gIGNvbnNvbGUud2Fybign8J+TnSBSZXF1aXJlZCB2YXJpYWJsZXMgZm9yIGNsaWVudC1zaWRlOicpXG4gIGNvbnNvbGUud2FybignICAgTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMPXlvdXJfc3VwYWJhc2VfdXJsJylcbiAgY29uc29sZS53YXJuKCcgICBORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWT15b3VyX3N1cGFiYXNlX2Fub25fa2V5JylcbiAgY29uc29sZS53YXJuKCfwn5OdIE9yIGFkZCB0aGUgbm9uLXByZWZpeGVkIHZlcnNpb25zIHRvIHlvdXIgLmVudiBmaWxlJylcbn0gZWxzZSB7XG4gIGNvbnNvbGUubG9nKCfinIUgU3VwYWJhc2UgY2xpZW50IGNvbmZpZ3VyZWQgc3VjY2Vzc2Z1bGx5IScpXG59XG5cbmV4cG9ydCBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5LCB7XG4gIGF1dGg6IHtcbiAgICBwZXJzaXN0U2Vzc2lvbjogZmFsc2VcbiAgfVxufSlcblxuLy8gRm9yIHNlcnZlci1zaWRlIG9wZXJhdGlvbnMgdGhhdCBuZWVkIGVsZXZhdGVkIHBlcm1pc3Npb25zXG5leHBvcnQgY29uc3Qgc3VwYWJhc2VBZG1pbiA9IGNyZWF0ZUNsaWVudChcbiAgc3VwYWJhc2VVcmwsXG4gIHN1cGFiYXNlU2VydmljZUtleSxcbiAge1xuICAgIGF1dGg6IHtcbiAgICAgIHBlcnNpc3RTZXNzaW9uOiBmYWxzZVxuICAgIH1cbiAgfVxuKVxuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsIlNVUEFCQVNFX1VSTCIsInN1cGFiYXNlQW5vbktleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwiU1VQQUJBU0VfS0VZIiwic3VwYWJhc2VTZXJ2aWNlS2V5IiwiU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSIsImNvbnNvbGUiLCJsb2ciLCJ3YXJuIiwic3VwYWJhc2UiLCJhdXRoIiwicGVyc2lzdFNlc3Npb24iLCJzdXBhYmFzZUFkbWluIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase.ts\n");

/***/ }),

/***/ "(ssr)/../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \*******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/formdata-node","vendor-chunks/openai","vendor-chunks/@langchain","vendor-chunks/semver","vendor-chunks/zod-to-json-schema","vendor-chunks/langsmith","vendor-chunks/zod","vendor-chunks/form-data-encoder","vendor-chunks/uuid","vendor-chunks/@cfworker","vendor-chunks/agentkeepalive","vendor-chunks/retry","vendor-chunks/p-queue","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/p-timeout","vendor-chunks/p-retry","vendor-chunks/p-finally","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/eventemitter3","vendor-chunks/event-target-shim","vendor-chunks/decamelize","vendor-chunks/camelcase","vendor-chunks/ansi-styles","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cshilo%5CElective%20Chooser%5Cfrontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cshilo%5CElective%20Chooser%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();